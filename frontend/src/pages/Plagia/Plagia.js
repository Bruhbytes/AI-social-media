import React, { useState } from "react";
import axios from "axios";

const Plagia = () => {
  // Define your state variables
  const [text, setText] = useState("");
  const [result, setResult] = useState({});
  const [isPlagiarism, setIsPlagiarism] = useState(null);
  const [scoreRes, setScoreRes] = useState(null);
  const [errorMessage, setErrorMessage] = useState("");

  const analyzeText = async () => {
    try {
      const response = await axios.post("http://localhost:5000/analyze", {
        text,
      });
      const { perplexity, burstiness_score } = response.data;
      const isGenerated = perplexity > 30000 && burstiness_score < 0.2;
      setResult({ ...response.data, isGenerated });
    } catch (error) {
      console.error(error);
    }
  };

  const analyzePlag = async () => {
    if (!text.trim()) {
      setErrorMessage("Please enter some text");
      return;
    }

    try {
      const response = await axios.post(
        "http://localhost:5000/detect_plagiarism",
        {
          text,
        }
      );
      const { similarity_score, is_plagiarism } = response.data;
      setIsPlagiarism(
        similarity_score >= 0.8
          ? "Plagiarism detected"
          : "No plagiarism detected"
      );
      setScoreRes((similarity_score * 100).toFixed(2)); // Format to two decimal places
      setResult(response.data); // Update the result state if needed
      setErrorMessage(""); // Clear error message if analysis is successful
    } catch (error) {
      console.error(error);
      setErrorMessage("An error occurred"); // Set error message if API call fails
    }
  };

  const handleAnalyze = async () => {
    await Promise.all([analyzePlag(), analyzeText()]);
  };

  return (
    <div style={{ padding: "20px", maxWidth: "600px", margin: "auto" }}>
      <h1 style={{ marginBottom: "20px" }}>Text Analyzer</h1>
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        style={{ width: "100%", minHeight: "200px", padding: "10px" }}
      />
      <button
        onClick={handleAnalyze}
        disabled={!text.trim()}
        style={{
          marginTop: "10px",
          padding: "10px 20px",
          fontSize: "16px",
          backgroundColor: "#007bff",
          color: "#fff",
          border: "none",
          borderRadius: "5px",
          cursor: "pointer",
        }}
      >
        Analyze
      </button>
      <div style={{ marginTop: "20px" }}>
        {/* <h3>Perplexity: {result.perplexity}</h3> */}
        {/* <h3>Burstiness Score: {result.burstiness_score}</h3> */}
        <h3>
          Generated Cue:{" "}
          {result.isGenerated
            ? "Likely generated by a language model"
            : "Not likely generated by a language model"}
        </h3>
        {result.isGenerated && (
          <p style={{ color: "red" }}>
            This text is likely generated by a language model.
          </p>
        )}
      </div>
      {errorMessage && <p style={{ color: "red" }}>{errorMessage}</p>}
      <div
        style={{
          marginTop: "20px",
          display: "flex",
          justifyContent: "space-around",
        }}
      >
        <div>
          <h3>Plagiarism : {isPlagiarism}</h3>
        </div>
        <div>
          <h3>Similarity Score : {scoreRes}</h3>
        </div>
      </div>
    </div>
  );
};

export default Plagia;
